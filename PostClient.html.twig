{% extends 'base.html.twig' %}


{% block body %}
 <style>
        .img-box {
            max-width: 100%; 
            overflow: hidden; 
        }

        .img1 {
            width: 100%; 
            height: auto; 
            display: block;
        }
         .post-box {
        cursor: pointer;
        margin-bottom: 10px;
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .post-box:hover {
        background-color: #e9e9e9;
    }
    .modal-content {
        border-radius: 15px;
    }

    .modal-header {
        border-bottom: none;
    }

    .modal-footer {
        border-top: none;
    }

    .form-control {
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .custom-file-label {
        border-radius: 10px;
    }
    .comment-textarea {
        display: none; 
    }
    </style>
<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
         <!-- Modal Trigger -->
            <div class="post-box" data-toggle="modal" data-target="#postModal">
                <h5 style="margin-bottom: 0;">Click here to view a sample post</h5>
            </div>

            <!-- Modal -->
            <div class="modal fade" id="postModal" tabindex="-1" role="dialog" aria-labelledby="postModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="postModalLabel">Create Post</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                         <form action="{{ path('Client_post_index') }}" method="post" id="postForm" enctype="multipart/form-data">
                        <div class="modal-body">
                            {{ form_start(form) }}
                            {{ form_row(form.titre) }}
                            {{ form_row(form.description) }}
                            {{ form_row(form.image) }}
                            {{ form_end(form) }}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary" id="submitBtn">Submit</button>
                        </div>
                        </form>
                    </div>
                </div>
            </div>
         <div class="modal fade" id="editPostModal" tabindex="-1" role="dialog" aria-labelledby="editPostModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editPostModalLabel">Edit Post</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="editPostForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" id="editPostId">
                    <div class="form-group">
                        <label for="editTitle">Title</label>
                        <input type="text" class="form-control" id="editTitle" name="title">
                    </div>
                    <div class="form-group">
                        <label for="editDescription">Description</label>
                        <textarea class="form-control" id="editDescription" rows="3" name="description"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="editImage">Image</label>
                        <input type="file" class="form-control-file" id="editImage" name="image">
                    </div>
                    <div class="form-group">
                        <label for="editImagePreview">Image Preview</label>
                        <img id="editImagePreview" src="" alt="Image Preview" class="img-fluid">
                    </div>
                    <div class="form-group">
                        <label for="editDate">Date</label>
                        <input type="date" class="form-control" id="editDate" >
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveChanges()">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
      
            
            {% for post in posts %}
      <!-- Edit Post Modal for each post -->

<!-- End Edit Post Modal -->
            <div class="card my-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>{{ post.titre }}</h5>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                            id="dropdownMenuButton{{ post.id }}" data-toggle="dropdown" aria-haspopup="true"
                            aria-expanded="false">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton{{ post.id }}">
                            <a class="dropdown-item" data-toggle="modal" data-target="#editPostModal"  onclick="openEditModal({{ post.id }})">Edit</a>
                             <button onclick="deletePostWithComments({{ post.id }})">Delete</button>
                        </div>
                    </div>
                          <!-- Edit Post Modal -->

                </div>
                <div class="card-body">
                    <p>{{ post.description }}</p>
                    {% if post.image %}
                    <div class="img-box">
                        <img src="{{ asset('uploads/' ~ post.image) }}" class="img1" alt="Post Image">
                    </div>
                    {% endif %}
                </div>
                <div class="card-footer">
                      <button class="btn btn-primary btn-sm mr-2 like-btn" data-post-id="{{ post.id }}" data-action="{{ post.isLikedBySession(app.session.id) ? 'dislike' : 'like' }}">{{ post.isLikedBySession(app.session.id) ? 'Dislike' : 'Like' }}</button>
                    <button class="btn btn-secondary btn-sm comment-btn" data-post-id="{{ post.id }}"
                        onclick="toggleCommentTextarea({{ post.id }})">Comment</button>
                    <!-- Display likes count -->
                     <span class="likes-count" id="likesCount{{ post.id }}">Likes: {{ post.getLikedBy()|length }}</span>
                    <span class="comment-count">Comments: {{ commentCounts[post.id] }}</span>
                </div>
                <!-- Comment textarea -->
                 <div id="commentsContainer{{ post.id }}" style="display: none;"></div>
                <div id="commentTextarea{{ post.id }}" class="comment-textarea">
                
                    <textarea id="commentContent{{ post.id }}" name="comment_content" class="form-control" rows="3" placeholder="Write your comment here"></textarea>
                    <button class="btn btn-primary mt-2" onclick="submitComment({{ post.id }})" >Submit</button>
                </div>
               
            </div>
             <script>
            const eventSource{{ post.id }} = new EventSource("{{ mercure(['https://example.com/posts/' ~ post.id ~ '/comments'])|escape('js') }}");

            eventSource{{ post.id }}.onmessage = event => {
                const data = JSON.parse(event.data);
                // Display the received message as a notification
                alert(data.message);
            };

       

         
        


         
        </script>
            {% endfor %}
        </div>
    </div>
</div>
<script>
// like dislike section
 document.addEventListener("DOMContentLoaded", function () {
        // Attach event listener to like buttons
        var likeButtons = document.querySelectorAll(".like-btn");
        likeButtons.forEach(function (button) {
            button.addEventListener("click", function () {
                var postId = this.getAttribute("data-post-id");
                var action = this.getAttribute("data-action"); // Get the action (like or dislike)
                likeOrDislike(postId, action);
            });
        });
    });

  function likeOrDislike(postId, action) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
                var data = JSON.parse(xhr.responseText);
                if (data.success) {
                    // Update likes count
                    document.getElementById("likesCount" + postId).textContent = 'Likes: ' + data.likesCount;
                    var likeButton = document.querySelector('.like-btn[data-post-id="' + postId + '"]');
                    if (action === 'like') {
                        likeButton.textContent = 'Dislike';
                        likeButton.setAttribute('data-action', 'dislike'); // Update data-action attribute
                    } else if (action === 'dislike') {
                        likeButton.textContent = 'Like';
                        likeButton.setAttribute('data-action', 'like'); // Update data-action attribute
                    }
                } else {
                    console.error("Failed to like/dislike post.");
                }
            } else {
                console.error("Failed to like/dislike post.");
            }
        }
    };
    xhr.open("POST", "/post/like/" + postId, true);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"); // Change content type
    xhr.send(action); // Send action as a string
}
    ///////////////////////////////////////////

    document.getElementById("submitBtn").addEventListener("click", function () {
        var form = document.getElementById("postForm");
        var formData = new FormData(form);

        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    // Success
                    console.log(xhr.responseText);
                    window.location.reload(); // Refresh the page after successful submission
                } else {
                    // Error
                    console.error(xhr.responseText);
                }
            }
        };
        xhr.open("POST", "{{ path('Client_post_index') }}", true);
        xhr.send(formData);
    });
   
    function toggleCommentTextarea(postId) {
    var textarea = document.getElementById('commentTextarea' + postId);
    if (textarea.style.display === 'none') {
        textarea.style.display = 'block';
        fetchComments(postId); 
    } else {
        textarea.style.display = 'none';
    }
}
function fetchComments(postId) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
                // Success
                var comments = JSON.parse(xhr.responseText);
                displayComments(comments, postId); 
            } else {
                // Error
                console.error(xhr.responseText);
            }
        }
    };
    xhr.open("GET", "/comment/" + postId, true);
    xhr.send();
}

function displayComments(comments, postId) {
     var commentsContainer = document.getElementById('commentsContainer' + postId);
    if (commentsContainer) {
        commentsContainer.innerHTML = ''; 
        comments.forEach(function(comment) {
            var commentDiv = document.createElement('div');
            commentDiv.textContent = comment.content;
            commentsContainer.appendChild(commentDiv);
        });
        commentsContainer.style.display = 'block'; // Make sure the comments container is visible
    }
}

     function submitComment(postId) {
        var content = document.getElementById('commentContent' + postId).value;

        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    // Success
                    console.log(xhr.responseText);
                    window.location.reload(); 
                } else {
                    // Error
                    console.error(xhr.responseText);
                }
            }
        };
        xhr.open("POST", "/comment/add/" + postId, true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.send("comment_content=" + content);
    }

    function deletePostWithComments(postId) {
   var confirmed = confirm('Are you sure you want to delete this post?');
    
    // If user confirmed, proceed with deletion
    if (confirmed) {
        $.ajax({
            url: '/post/delete/' + postId,
            type: 'POST',
            success: function(response) {
                // Handle success response
                alert(response.message);
                // Optionally, reload the page or update the UI
                window.location.reload();
            },
            error: function(xhr, status, error) {
                // Handle error response
                console.error(xhr.responseText);
                alert('An error occurred while deleting the post and associated comments.');
            }
        });
    }
}
   function openEditModal(postId) {
    // Fetch post data via AJAX
    $.ajax({
        url: '/post/edit/' + postId, // Adjust the URL according to your route
        type: 'GET',
        dataType: 'json',
        success: function(response) {
            console.log(response);
            // Populate form fields with fetched data
            $('#editPostId').val(response.id);
            $('#editTitle').val(response.titre);
            $('#editDescription').val(response.description);
             $('#editDate').val(response.date);
            $('#editImagePreview').attr('src', '{{ asset('uploads/') }}' + response.image); // Set the src attribute
            
            // Open the modal
            $('#editPostModal').modal('show');
        },
        error: function(xhr, status, error) {
            console.error(xhr.responseText);
            alert('An error occurred while fetching post data.');
        }
    });
}

function saveChanges() {
    var postId = document.getElementById('editPostId').value;
    var title = document.getElementById('editTitle').value;
    var description = document.getElementById('editDescription').value;
    var date = document.getElementById('editDate').value;
    var formData = new FormData();
    formData.append('title', title);
    formData.append('description', description);
    formData.append('date', date);
    var imageFile = document.getElementById('editImage').files[0];
    if (imageFile) {
        formData.append('image', imageFile);
    }

    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
                // Success
                console.log(xhr.responseText);
                
              
                
                window.location.reload();
                    document.getElementById('editPostModal').style.display = 'none';
            } else {
                // Error
                console.error(xhr.responseText);
            }
        }
    };
    xhr.open("POST", "/post/update/" + postId, true);
    xhr.send(formData);
}




     


    
    
</script>

{% endblock %}